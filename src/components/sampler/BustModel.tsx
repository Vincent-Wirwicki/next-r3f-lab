/*
model from : https://polyhaven.com/a/marble_bust_01
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 public/model/bust/marble_bust_01_2k.gltf -t -r public 
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { Sampler, useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    marble_bust_01: THREE.Mesh;
  };
  materials: {
    marble_bust_01: THREE.MeshStandardMaterial;
  };
  // animations: GLTFAction[]materials
};
export function BustModel(props: JSX.IntrinsicElements["group"]) {
  const { nodes } = useGLTF("/model/bust/marble_bust_01_2k.gltf") as GLTFResult;
  const meshRef = useRef<THREE.Mesh>(null);
  const count = 1000;
  return (
    <group {...props} dispose={null}>
      <Sampler mesh={meshRef} count={count} weight="upness">
        <mesh
          ref={meshRef}
          scale={1}
          castShadow
          geometry={nodes.marble_bust_01.geometry}
          // material={materials.marble_bust_01}
          position={[0, 0, 0]}
        >
          {" "}
          <meshPhysicalMaterial metalness={1} color="white" />
        </mesh>
        <instancedMesh args={[undefined, undefined, count]}>
          <sphereGeometry args={[0.0075]} />
          <meshPhysicalMaterial
            thickness={1}
            color={"red"}
            metalness={0}
            transmission={1}
          />
        </instancedMesh>
      </Sampler>
    </group>
  );
}

useGLTF.preload("/model/bust/marble_bust_01_2k.gltf");
